{"version":3,"sources":["webparts/list/ListWebPart.ts"],"names":[],"mappings":"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","file":"webparts/list/ListWebPart.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { Version } from '@microsoft/sp-core-library';\nimport {\n  BaseClientSideWebPart,\n  IPropertyPaneConfiguration,\n  PropertyPaneTextField,\n  PropertyPaneDropdown\n} from '@microsoft/sp-webpart-base';\n\nimport * as strings from 'ListWebPartStrings';\nimport List from './components/List';\nimport { IListProps } from './components/IListProps';\nimport SharepointService from '../../sharepoint/SharepointServiceManager';\n\nexport interface IListWebPartProps {\n  siteCollection: string;\n  listID: string;\n\n}\n\nexport default class ListWebPart extends BaseClientSideWebPart<IListWebPartProps> {\n\n  listOfLists = []\n\n  public render(): void {\n    const element: React.ReactElement<IListProps> = React.createElement(\n      List,\n      {\n        listID: \"ba0142f2-a1aa-43f3-85f4-b6ddb75f449d\",\n        // listID: this.properties.listID,\n        // siteCollection: this.properties.siteCollection,\n        siteCollection: \"https://support.bna.dz\",\n        UserID: this.context.pageContext.legacyPageContext[\"userId\"],\n        context: this.context.pageContext.legacyPageContext,\n      }\n    );\n\n    ReactDom.render(element, this.domElement);\n  }\n\n  protected onDispose(): void {\n    ReactDom.unmountComponentAtNode(this.domElement);\n  }\n\n  protected onInit(): Promise<void> {\n    return super.onInit().then(_ => {\n      SharepointService.setup(this.context)\n      this.properties.siteCollection = this.context.pageContext.web.absoluteUrl\nconsole.log(this.properties.siteCollection)\nconsole.log(this.properties.listID)\n      this.setupLists(\"https://support.bna.dz\")\n      // this.setupLists(this.properties.siteCollection)\n    })\n  }\n\n  setupLists(siteCollection: string) {\n    SharepointService.getLists(siteCollection).then(result => {\n      this.listOfLists = result.value\n    }).catch(err => {\n      this.listOfLists = []\n    })\n  }\n\n  protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void {\n    if (propertyPath === \"siteCollection\") {\n      this.setupLists(newValue)\n    }\n\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                PropertyPaneTextField('siteCollection', {\n                  label: \"Collection de site\"\n                }),\n                PropertyPaneDropdown('listID', {\n                  label: \"Séléctionner une liste\",\n                  options: this.listOfLists.map(list => ({ text: list.Title, key: list.Id })),\n                  disabled: this.listOfLists.length === 0\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}