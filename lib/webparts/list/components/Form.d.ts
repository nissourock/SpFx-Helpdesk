/// <reference types="react" />
import * as React from "react";
import { IListProps } from "./IListProps";
export default class Form extends React.Component<IListProps, {
    description: string;
    title: string;
    categories: any[];
    incidents: any[];
    incidentsToDisplay: any;
    priorities: any[];
    selectedPriority: any;
    agences: any;
    selectedAgence: any;
    divisions: any;
    selectedDivisions: any;
    directions: any;
    selectedDirections: any;
    selectedIncident: any;
    selectedCategory: any;
    ticketType: any;
    isSubmitClicked: boolean;
    isModal: boolean;
    requesterUserId: any;
    submitted: boolean;
    lastCreatedTicketId: string | number;
    attachementUploaded: boolean;
}> {
    constructor(props: IListProps);
    componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<IListProps>, prevState: Readonly<any>, prevContext: any): void;
    render(): React.ReactElement<IListProps>;
    private _onChange1;
    private _onChange2;
    private _onRenderOption;
    private _onRenderOption2;
    private _onRenderOption3;
    private _onRenderOption4;
    private _onRenderOption5;
    private _onRenderOption6;
    private _onRenderTitle;
    private _onRenderTitle2;
    private _onRenderTitle3;
    private _onRenderTitle4;
    private _onRenderTitle5;
    private _onRenderTitle6;
    private _onRenderPlaceholder;
    private _onRenderPlaceholder2;
    private _onRenderPlaceholder3;
    private _onRenderPlaceholder4;
    private _onRenderPlaceholder5;
    private _onRenderPlaceholder6;
    private _onRenderCaretDown;
    private _onRenderCaretDown2;
    private _onRenderCaretDown3;
    private _onRenderCaretDown4;
    private _onRenderCaretDown5;
    private _onRenderCaretDown6;
    private _onChange_Category;
    private _onChange_Incident;
    private _onChange_Priority;
    private _onChange_Agence;
    private _onChange_Division;
    private _onChange_Direction;
    private getCategories(siteCollection);
    private getPriorities(siteCollection);
    private getIncidents(siteCollection);
    private getAgences(siteCollection);
    private getDivisions(siteCollection);
    private getDirections(siteCollection);
    selectTicketType(type: any): void;
    toTitleCase(str: any): any;
    addTicket(siteCollection: string, listID: string, userId: string): void;
    createComment(siteCollection: any, commentBody: any, ticketId: any, userID: any): void;
    private addComment;
    getRequesterId(siteCollection: string, userId: string): void;
    _showToastrMessage: (scope: string, textToShow: any) => void;
    fileUploaded(): void;
}
